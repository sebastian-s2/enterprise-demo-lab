// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the LICENSE file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.swg.v1;
option go_package = "arista/resources/arista/swg.v1;swg";

import "arista/swg.v1/swg.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message EndpointConfigRequest {
	// Key uniquely identifies a EndpointConfig instance to retrieve.
	// This value must be populated.
	SwgKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message EndpointConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	EndpointConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// EndpointConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message EndpointConfigSomeRequest {
	repeated SwgKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message EndpointConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	EndpointConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message EndpointConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated EndpointConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each EndpointConfig at end.
	//     * Each EndpointConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each EndpointConfig at start, followed by updates until now.
	//     * Each EndpointConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each EndpointConfig at start, followed by updates
	//     until end.
	//     * Each EndpointConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message EndpointConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	EndpointConfig value = 1;

	// Time holds the timestamp of this EndpointConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the EndpointConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message EndpointConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated EndpointConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each EndpointConfig at end.
	//     * Each EndpointConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each EndpointConfig at start, followed by updates until now.
	//     * Each EndpointConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each EndpointConfig at start, followed by updates
	//     until end.
	//     * Each EndpointConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message EndpointConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated EndpointConfigStreamResponse responses = 1;
};

message EndpointConfigSetRequest {
	// EndpointConfig carries the value to set into the datastore.
	// See the documentation on the EndpointConfig struct for which fields are required.
	EndpointConfig value = 1;
};

message EndpointConfigSetResponse {
	// Value carries all the values given in the EndpointConfigSetRequest as well
	// as any server-generated values.
	EndpointConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message EndpointConfigSetSomeRequest {
	// value contains a list of EndpointConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated EndpointConfig values = 1;
};

message EndpointConfigSetSomeResponse {
	SwgKey key = 1;
	string error = 2;
};

message EndpointConfigDeleteRequest {
	// Key indicates which EndpointConfig instance to remove.
	// This field must always be set.
	SwgKey key = 1;
};

message EndpointConfigDeleteResponse {
	// Key echoes back the key of the deleted EndpointConfig instance.
	SwgKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message EndpointConfigDeleteSomeRequest {
	// key contains a list of EndpointConfig keys to delete
	repeated SwgKey keys = 1;
};

// EndpointConfigDeleteSomeResponse is only sent when there is an error.
message EndpointConfigDeleteSomeResponse {
	SwgKey key = 1;
	string error = 2;
};

message EndpointConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated EndpointConfig partial_eq_filter = 1;
};

message EndpointConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the EndpointConfig instance that failed to be deleted.
	SwgKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service EndpointConfigService {
	rpc GetOne (EndpointConfigRequest) returns (EndpointConfigResponse);
	rpc GetSome (EndpointConfigSomeRequest) returns (stream EndpointConfigSomeResponse);
	rpc GetAll (EndpointConfigStreamRequest) returns (stream EndpointConfigStreamResponse);
	rpc Subscribe (EndpointConfigStreamRequest) returns (stream EndpointConfigStreamResponse);
	rpc GetMeta (EndpointConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (EndpointConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (EndpointConfigSetRequest) returns (EndpointConfigSetResponse);
	rpc SetSome (EndpointConfigSetSomeRequest) returns (stream EndpointConfigSetSomeResponse);
	rpc Delete (EndpointConfigDeleteRequest) returns (EndpointConfigDeleteResponse);
	rpc DeleteSome (EndpointConfigDeleteSomeRequest) returns (stream EndpointConfigDeleteSomeResponse);
	rpc DeleteAll (EndpointConfigDeleteAllRequest) returns (stream EndpointConfigDeleteAllResponse);
	rpc GetAllBatched (EndpointConfigBatchedStreamRequest) returns (stream EndpointConfigBatchedStreamResponse);
	rpc SubscribeBatched (EndpointConfigBatchedStreamRequest) returns (stream EndpointConfigBatchedStreamResponse);
}

message EndpointStatusRequest {
	// Key uniquely identifies a EndpointStatus instance to retrieve.
	// This value must be populated.
	SwgKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message EndpointStatusResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	EndpointStatus value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// EndpointStatus instance in this response.
	google.protobuf.Timestamp time = 2;
};

message EndpointStatusSomeRequest {
	repeated SwgKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message EndpointStatusSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	EndpointStatus value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message EndpointStatusStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated EndpointStatus partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each EndpointStatus at end.
	//     * Each EndpointStatus response is fully-specified (all fields set).
	//   * start: Returns the state of each EndpointStatus at start, followed by updates until now.
	//     * Each EndpointStatus response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each EndpointStatus at start, followed by updates
	//     until end.
	//     * Each EndpointStatus response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message EndpointStatusStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	EndpointStatus value = 1;

	// Time holds the timestamp of this EndpointStatus's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the EndpointStatus value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message EndpointStatusBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated EndpointStatus partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each EndpointStatus at end.
	//     * Each EndpointStatus response is fully-specified (all fields set).
	//   * start: Returns the state of each EndpointStatus at start, followed by updates until now.
	//     * Each EndpointStatus response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each EndpointStatus at start, followed by updates
	//     until end.
	//     * Each EndpointStatus response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message EndpointStatusBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated EndpointStatusStreamResponse responses = 1;
};

service EndpointStatusService {
	rpc GetOne (EndpointStatusRequest) returns (EndpointStatusResponse);
	rpc GetSome (EndpointStatusSomeRequest) returns (stream EndpointStatusSomeResponse);
	rpc GetAll (EndpointStatusStreamRequest) returns (stream EndpointStatusStreamResponse);
	rpc Subscribe (EndpointStatusStreamRequest) returns (stream EndpointStatusStreamResponse);
	rpc GetMeta (EndpointStatusStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (EndpointStatusStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (EndpointStatusBatchedStreamRequest) returns (stream EndpointStatusBatchedStreamResponse);
	rpc SubscribeBatched (EndpointStatusBatchedStreamRequest) returns (stream EndpointStatusBatchedStreamResponse);
}
