# Copyright (c) 2024 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: arista/workspace.v1/services.gen.proto, arista/workspace.v1/workspace.proto
# plugin: python-aristaproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

try:
    import aristaproto
    import grpclib
    from aristaproto.grpc.grpclib_server import ServiceBase
except ImportError:
    HAS_ARISTAPROTO = False
    from ansible_collections.arista.avd.plugins.plugin_utils.cv_client.mocked_classes import mocked_aristaproto as aristaproto
    from ansible_collections.arista.avd.plugins.plugin_utils.cv_client.mocked_classes import mocked_grpclib as grpclib
    ServiceBase = object
else:
    HAS_ARISTAPROTO = True

from .... import fmp as ___fmp__
from ... import (
    subscriptions as __subscriptions__,
    time as __time__,
)
from ...configstatus import v1 as __configstatus_v1__
from ...imagestatus import v1 as __imagestatus_v1__


if TYPE_CHECKING:
    import grpclib.server
    from aristaproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class WorkspaceState(aristaproto.Enum):
    """
    WorkspaceState enumerates the general states of a workspace. Some of these states
     are derived as a result of executing a specific request on the workspace (see Request).
    """

    UNSPECIFIED = 0
    """WORKSPACE_STATE_UNSPECIFIED indicates unspecified workspace state."""

    PENDING = 1
    """
    WORKSPACE_STATE_PENDING indicates that the changes in the workspace are open and
     have not been submitted.
    """

    SUBMITTED = 2
    """
    WORKSPACE_STATE_SUBMITTED indicates that the changes in the workspace have been
     submitted to the mainline.
    """

    ABANDONED = 3
    """
    WORKSPACE_STATE_ABANDONED indicates that the workspace has been intentionally
     closed, and may no longer be updated.
    """

    CONFLICTS = 4
    """
    WORKSPACE_STATE_CONFLICTS indicates that the changes in the workspace are in
     conflict with the current state of the system.
    """

    ROLLED_BACK = 5
    """
    WORKSPACE_STATE_ROLLED_BACK indicates that the workspace was submitted, but
     has been rolled back (the changes have been undone).
    """


class Request(aristaproto.Enum):
    """
    Request enumerates the set of asynchronous operations that can be performed on a
     workspace.
    """

    UNSPECIFIED = 0
    """REQUEST_UNSPECIFIED describes unspecified request."""

    START_BUILD = 1
    """
    REQUEST_START_BUILD describes a request to start building a workspace. This kicks
     of a multi-stage operation to compile and validate the changes in a workspace (see
     BuildStage for more details).
    """

    CANCEL_BUILD = 2
    """
    REQUEST_CANCEL_BUILD describes a request to stop building a workspace.
    """

    SUBMIT = 3
    """
    REQUEST_SUBMIT describes a request to submit a workspace to the mainline. Before
     submission, some checks are made that can cause the request to fail. E.g., if there
     is a modified configuration for a non-streaming device in the workspace, then the
     request will fail. Once submitted, changes are applied and change controls are
     created (if necessary).
    """

    ABANDON = 4
    """
    REQUEST_ABANDON describes a request to abandon a workspace. This operation does
     not delete the workspace from the system, but closes it to any further updates.
    """

    ROLLBACK = 5
    """
    REQUEST_ROLLBACK describes a request to rollback a submitted workspace, undoing
     corresponding changes in the mainline.
    """

    SUBMIT_FORCE = 6
    """
    REQUEST_SUBMIT_FORCE describes a request to submit a workspace without making any
     checks that could normally cause the submission to fail. See REQUEST_SUBMIT for
     more details.
    """

    REBASE = 7
    """
    REQUEST_REBASE describes a request to rebase a workspace. This operation updates
     workspace state to reflect the latest mainline content, and re-applies workspace
     changes on top of that.
    """


class ResponseStatus(aristaproto.Enum):
    """
    ResponseStatus enumerates the set of execution statuses of a Response.
    """

    UNSPECIFIED = 0
    """RESPONSE_STATUS_UNSPECIFIED indicates unspecified response status."""

    SUCCESS = 1
    """
    RESPONSE_STATUS_SUCCESS indicates that the original Request was successful
     in its execution.
    """

    FAIL = 2
    """
    RESPONSE_STATUS_FAIL indicates that the original Request was unsuccessful
     in its execution.
    """


class ResponseCode(aristaproto.Enum):
    """
    ResponseCode is a code for a Response indicating a particular scenario.
    """

    UNSPECIFIED = 0
    """RESPONSE_CODE_UNSPECIFIED indicates unspecified response code."""

    INACTIVE_DEVICES_EXIST = 1
    """
    RESPONSE_CODE_INACTIVE_DEVICES_EXIST indicates that there are devices that have inactive
     streaming status.
    """


class BuildState(aristaproto.Enum):
    """
    BuildState enumerates the set of states that a BuildStage can be in during a
     workspace build cycle.
    """

    UNSPECIFIED = 0
    """BUILD_STATE_UNSPECIFIED indicates unspecified build state."""

    IN_PROGRESS = 1
    """
    BUILD_STATE_IN_PROGRESS indicates that the BuildStage was started but has
     not yet completed.
    """

    CANCELED = 2
    """
    BUILD_STATE_CANCELED indicates that the BuildStage was started but then
     stopped before completion.
    """

    SUCCESS = 3
    """
    BUILD_STATE_SUCCESS indicates that the BuildStage was started and ran to
     completion successfully.
    """

    FAIL = 4
    """
    BUILD_STATE_FAIL indicates that the BuildStage was started and ran to
     completion unsuccessfully.
    """

    SKIPPED = 5
    """BUILD_STATE_SKIPPED indicates that the BuildStage was not run."""


class BuildStage(aristaproto.Enum):
    """BuildStage enumerates the types of stages of a build of a workspace."""

    UNSPECIFIED = 0
    """BUILD_STAGE_UNSPECIFIED indicates unspecified build stage."""

    INPUT_VALIDATION = 1
    """
    BUILD_STAGE_INPUT_VALIDATION describes the stage that detects input
     errors in studios based on their schemas.
    """

    CONFIGLET_BUILD = 2
    """
    BUILD_STAGE_CONFIGLET_BUILD describes the stage that generates EOS CLI
     configs and images for devices by evaluating studio templates against
     their inputs.
    """

    CONFIG_VALIDATION = 3
    """
    BUILD_STAGE_CONFIG_VALIDATION describes the stage that validates the
     generated EOS CLI configs (e.g., checks for errors in the config).
    """

    IMAGE_VALIDATION = 4
    """
    BUILD_STAGE_IMAGE_VALIDATION describes the stage that validates the
     generated images (e.g., checks device compatibility).
    """


class DeviceAuthzStatus(aristaproto.Enum):
    """
    DeviceAuthzStatus holds the result of the authorization check on device.
    """

    UNSPECIFIED = 0
    """
    DEVICE_AUTHZ_STATUS_UNSPECIFIED indicates the authorization check is pending.
    """

    AUTHORIZED = 1
    """
    DEVICE_AUTHZ_STATUS_AUTHORIZED indicates the subject
     is authorized to provision this device.
    """

    UNAUTHORIZED = 2
    """
    DEVICE_AUTHZ_STATUS_UNAUTHORIZED indicates the subject
     is unauthorized to provision this device.
    """


class ConfigValidationSkipCause(aristaproto.Enum):
    """
    ConfigValidationSkipCause enumerates the set of reasons a device can skip the config
     validation stage.
    """

    UNSPECIFIED = 0
    """
    CONFIG_VALIDATION_SKIP_CAUSE_UNSPECIFIED indicates config validation skip cause is
     unspecified.
    """

    INACTIVE = 1
    """
    CONFIG_VALIDATION_SKIP_CAUSE_INACTIVE indicates that the stage was skipped
     because the device is not streaming.
    """

    PRE_PROVISIONED = 2
    """
    CONFIG_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED indicates that the stage was
     skipped because the device is pre-provisioned.
    """

    CONFIG_UNCHANGED = 3
    """
    CONFIG_VALIDATION_SKIP_CAUSE_CONFIG_UNCHANGED indicates that the stage was
     skipped because the device has no configuration changes in the workspace.
    """

    NO_CONFIG_SOURCES = 4
    """
    CONFIG_VALIDATION_SKIP_CAUSE_NO_CONFIG_SOURCES indicates that the stage was
     skipped because the device has no config sources in the workspace.
    """


class ImageValidationSkipCause(aristaproto.Enum):
    """
    ImageValidationSkipCause enumerates the set of reasons a device can skip the image
     validation stage.
    """

    UNSPECIFIED = 0
    """
    IMAGE_VALIDATION_SKIP_CAUSE_UNSPECIFIED indicates image validation skip cause is
     unspecified.
    """

    INACTIVE = 1
    """
    IMAGE_VALIDATION_SKIP_CAUSE_INACTIVE indicates that the stage was skipped
     because the device is not streaming.
    """

    PRE_PROVISIONED = 2
    """
    IMAGE_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED indicates that the stage was
     skipped because the device is pre-provisioned.
    """

    IMAGE_UNCHANGED = 3
    """
    IMAGE_VALIDATION_SKIP_CAUSE_IMAGE_UNCHANGED indicates that the stage was
     skipped because the device has no image changes in the workspace.
    """

    NO_PROPOSED_SOFTWARE = 4
    """
    IMAGE_VALIDATION_SKIP_CAUSE_NO_PROPOSED_SOFTWARE indicates that the stage was
     skipped because the device has no proposed software changes in the workspace.
    """


@dataclass(eq=False, repr=False)
class RequestParams(aristaproto.Message):
    """RequestParams define the parameters for a Request."""

    request_id: Optional[str] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_STRING
    )
    """
    request_id is the unique ID of the request. This is used to identify
     the Response for the request in Responses.
    """


@dataclass(eq=False, repr=False)
class Response(aristaproto.Message):
    """Response is a response to a Request."""

    status: "ResponseStatus" = aristaproto.enum_field(1)
    """status is the execution status of the response."""

    message: Optional[str] = aristaproto.message_field(2, wraps=aristaproto.TYPE_STRING)
    """message is a string that provides more details about the response."""

    code: "ResponseCode" = aristaproto.enum_field(3)
    """code is the code of the response."""


@dataclass(eq=False, repr=False)
class Responses(aristaproto.Message):
    """Responses is a collection of responses for completed requests."""

    values: Dict[str, "Response"] = aristaproto.map_field(
        1, aristaproto.TYPE_STRING, aristaproto.TYPE_MESSAGE
    )
    """values is a map from request ID to Response."""


@dataclass(eq=False, repr=False)
class WorkspaceKey(aristaproto.Message):
    """WorkspaceKey uniquely identifies a workspace."""

    workspace_id: Optional[str] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_STRING
    )
    """workspace_id is the unique ID of the workspace."""


@dataclass(eq=False, repr=False)
class WorkspaceConfig(aristaproto.Message):
    """WorkspaceConfig holds the configuration of a workspace."""

    key: "WorkspaceKey" = aristaproto.message_field(1)
    """key identifies the workspace."""

    display_name: Optional[str] = aristaproto.message_field(
        2, wraps=aristaproto.TYPE_STRING
    )
    """display_name is the user-defined name of the workspace."""

    description: Optional[str] = aristaproto.message_field(
        3, wraps=aristaproto.TYPE_STRING
    )
    """description is a brief description of the workspace."""

    request: "Request" = aristaproto.enum_field(4)
    """
    request (if not REQUEST_UNSPECIFIED) kicks off an asynchronous operation
     on the workspace.
    """

    request_params: "RequestParams" = aristaproto.message_field(5)
    """request_params specify the parameters for `request`."""


@dataclass(eq=False, repr=False)
class Workspace(aristaproto.Message):
    """Workspace holds the status of a workspace."""

    key: "WorkspaceKey" = aristaproto.message_field(1)
    """key identifies the workspace."""

    created_at: datetime = aristaproto.message_field(2)
    """created_at indicates when the workspace was created."""

    created_by: Optional[str] = aristaproto.message_field(
        3, wraps=aristaproto.TYPE_STRING
    )
    """created_by indicates who created the workspace."""

    last_modified_at: datetime = aristaproto.message_field(4)
    """last_modified_at indicates when the workspace was last updated."""

    last_modified_by: Optional[str] = aristaproto.message_field(
        5, wraps=aristaproto.TYPE_STRING
    )
    """last_modified_by indicates who last updated the workspace."""

    state: "WorkspaceState" = aristaproto.enum_field(6)
    """state describes the status of the workspace."""

    last_build_id: Optional[str] = aristaproto.message_field(
        7, wraps=aristaproto.TYPE_STRING
    )
    """
    last_build_id is the last build ID that was set in a WorkspaceBuild
     for this workspace.
    """

    responses: "Responses" = aristaproto.message_field(8)
    """
    responses are the responses for all requests that have been executed
     thusfar for this workspace.
    """

    cc_ids: "___fmp__.RepeatedString" = aristaproto.message_field(9)
    """
    cc_ids are the IDs of any change controls that were created as a result
     of submitting this workspace.
    """

    needs_build: Optional[bool] = aristaproto.message_field(
        10, wraps=aristaproto.TYPE_BOOL
    )
    """
    needs_build indicates whether a rebuild of the workspace is necessary
     in order to submit it.
    """

    last_rebased_at: datetime = aristaproto.message_field(11)
    """last_rebased_at indicates when the workspace was last rebased."""

    needs_rebase: Optional[bool] = aristaproto.message_field(
        12, wraps=aristaproto.TYPE_BOOL
    )
    """
    needs_rebase indicates whether a rebase of the workspace is necessary
     in order to submit it.
    """

    display_name: Optional[str] = aristaproto.message_field(
        13, wraps=aristaproto.TYPE_STRING
    )
    """display_name is the user-defined name of the workspace."""

    description: Optional[str] = aristaproto.message_field(
        14, wraps=aristaproto.TYPE_STRING
    )
    """description is a brief description of the workspace."""


@dataclass(eq=False, repr=False)
class InputError(aristaproto.Message):
    """
    InputError holds the details for an error on a studio input field or value.
    """

    field_id: Optional[str] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_STRING
    )
    """field_id is the ID of the input field."""

    path: "___fmp__.RepeatedString" = aristaproto.message_field(2)
    """path is the path leading up to the input field."""

    members: "___fmp__.RepeatedString" = aristaproto.message_field(3)
    """members are the members of the input field (if it is a group)."""

    message: Optional[str] = aristaproto.message_field(4, wraps=aristaproto.TYPE_STRING)
    """message is the error message."""


@dataclass(eq=False, repr=False)
class InputErrors(aristaproto.Message):
    """InputErrors is a list of InputError."""

    values: List["InputError"] = aristaproto.message_field(1)
    """values is a list of InputError."""


@dataclass(eq=False, repr=False)
class InputValidationResult(aristaproto.Message):
    """
    InputValidationResult holds the result of an input validation build stage.
    """

    input_schema_errors: "InputErrors" = aristaproto.message_field(1)
    """input_schema_errors are errors for fields in the input schema."""

    input_value_errors: "InputErrors" = aristaproto.message_field(2)
    """
    input_value_errors are errors for values assigned to fields in the input schema.
    """

    other_errors: "___fmp__.RepeatedString" = aristaproto.message_field(3)
    """other_errors are other miscellaneous errors."""


@dataclass(eq=False, repr=False)
class InputValidationResults(aristaproto.Message):
    """
    InputValidationResults is a collection of InputValidationResult (one per studio).
    """

    values: Dict[str, "InputValidationResult"] = aristaproto.map_field(
        1, aristaproto.TYPE_STRING, aristaproto.TYPE_MESSAGE
    )
    """values is map from studio ID to InputValidationResult."""


@dataclass(eq=False, repr=False)
class TemplateError(aristaproto.Message):
    """
    TemplateError holds details for an error that occured while evaluating a studio
     template against its inputs.
    """

    line_num: Optional[int] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_UINT32
    )
    """line_num is the number of the line on which the error occurred."""

    exception: Optional[str] = aristaproto.message_field(
        2, wraps=aristaproto.TYPE_STRING
    )
    """
    exception is the type of the exception thrown during the script execution.
     E.g., AssertionError, etc.
    """

    detail: Optional[str] = aristaproto.message_field(3, wraps=aristaproto.TYPE_STRING)
    """detail holds the details of the exception. E.g., a full backtrace."""

    exception_msg: Optional[str] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_STRING
    )
    """
    exception_msg is the message of the exception thrown during the script execution.
    """


@dataclass(eq=False, repr=False)
class TemplateErrors(aristaproto.Message):
    """TemplateErrors is a list of TemplateError."""

    values: List["TemplateError"] = aristaproto.message_field(1)
    """values is a list of TemplateError."""


@dataclass(eq=False, repr=False)
class ConfigletBuildResult(aristaproto.Message):
    """ConfigletBuildResult holds the result of a configlet build stage."""

    template_errors: "TemplateErrors" = aristaproto.message_field(1)
    """
    template_errors are errors that occured during studio template evaluation.
    """

    generated_config: Optional[str] = aristaproto.message_field(
        2, wraps=aristaproto.TYPE_STRING
    )
    """
    generated_config is the EOS CLI config that was generated from the stage.
    """

    other_error: Optional[str] = aristaproto.message_field(
        3, wraps=aristaproto.TYPE_STRING
    )
    """other_error is any other miscellaneous error."""

    execution_id: Optional[str] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_STRING
    )
    """
    execution_id is the unique ID for the execution of the template. This ID
     can be used to retrieve logs generated by the template.
    """

    input_errors: "InputErrors" = aristaproto.message_field(5)
    """
    input_errors are errors in input fields that are raised by the template.
    """


@dataclass(eq=False, repr=False)
class ConfigletBuildResults(aristaproto.Message):
    """
    ConfigletBuildResults is a collection of ConfigletBuildResult (one per studio).
    """

    values: Dict[str, "ConfigletBuildResult"] = aristaproto.map_field(
        1, aristaproto.TYPE_STRING, aristaproto.TYPE_MESSAGE
    )
    """values is a map from studio ID to ConfigletBuildResult."""


@dataclass(eq=False, repr=False)
class ConfigValidationResult(aristaproto.Message):
    """
    ConfigValidationResult holds the result of a config validation stage.
    """

    summary: "__configstatus_v1__.ConfigSummary" = aristaproto.message_field(1)
    """summary is a summary of the changes to the previous config."""

    errors: "__configstatus_v1__.ConfigErrors" = aristaproto.message_field(2)
    """errors are any errors detected in the generated config."""

    warnings: "__configstatus_v1__.ConfigErrors" = aristaproto.message_field(3)
    """warnings are any warnings about the generated config."""

    config_sources: "__configstatus_v1__.ConfigSources" = aristaproto.message_field(4)
    """config_sources identify the entities that generated the config."""


@dataclass(eq=False, repr=False)
class ImageValidationResult(aristaproto.Message):
    """ImageValidationResult holds the result of an image validation stage."""

    summary: "__imagestatus_v1__.ImageSummary" = aristaproto.message_field(1)
    """summary is a summary of the changes to the previous image."""

    errors: "__imagestatus_v1__.ImageErrors" = aristaproto.message_field(2)
    """errors are any errors detected in the generated image."""

    warnings: "__imagestatus_v1__.ImageWarnings" = aristaproto.message_field(3)
    """warnings are any warnings about the generated image."""

    image_input_error: Optional[str] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_STRING
    )
    """image_input_error indicates any errors in image inputs."""


@dataclass(eq=False, repr=False)
class BuildStageState(aristaproto.Message):
    """BuildStageState holds the state per build stage."""

    values: Dict[str, "BuildState"] = aristaproto.map_field(
        1, aristaproto.TYPE_STRING, aristaproto.TYPE_ENUM
    )
    """
    values is a map from build stage to build state.
     The possible keys to this map are BUILD_STAGE_UNSPECIFIED,
     BUILD_STAGE_INPUT_VALIDATION, BUILD_STAGE_CONFIGLET_BUILD,
     BUILD_STAGE_CONFIG_VALIDATION and BUILD_STAGE_IMAGE_VALIDATION.
    """


@dataclass(eq=False, repr=False)
class AuthzResult(aristaproto.Message):
    """
    AuthzResult has the result of the authorization check for workspace changes.
    """

    has_unauthorized_tag_change: Optional[bool] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_BOOL
    )
    """
    has_unauthorized_tag_change is true when there is a tag assignment that results
     in change in permissions and the subject is not authorized to do it.
    """

    has_unauthorized_device_change: Optional[bool] = aristaproto.message_field(
        2, wraps=aristaproto.TYPE_BOOL
    )
    """
    has_unauthorized_device_change is true when there is atleast 1 device
     for which the subject doesn't have provision permission.
    """

    error: Optional[str] = aristaproto.message_field(3, wraps=aristaproto.TYPE_STRING)
    """
    error is an error message that is set when either of the above values
     are true.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildKey(aristaproto.Message):
    """WorkspaceBuildKey uniquely identifies a build for a workspace."""

    workspace_id: Optional[str] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_STRING
    )
    """workspace_id is the ID of the workspace."""

    build_id: Optional[str] = aristaproto.message_field(
        2, wraps=aristaproto.TYPE_STRING
    )
    """build_id is the ID of the build."""


@dataclass(eq=False, repr=False)
class WorkspaceBuild(aristaproto.Message):
    """WorkspaceBuild holds the details for a build of a workspace."""

    key: "WorkspaceBuildKey" = aristaproto.message_field(1)
    """key identifies the build."""

    state: "BuildState" = aristaproto.enum_field(2)
    """state is the execution status of the build."""

    error: Optional[str] = aristaproto.message_field(4, wraps=aristaproto.TYPE_STRING)
    """
    error is an error message that is set if the build fails early before
     the per-device build result is computed.
    """

    built_by: Optional[str] = aristaproto.message_field(
        5, wraps=aristaproto.TYPE_STRING
    )
    """built_by is the details of subject who built the workspace."""

    authz_result: "AuthzResult" = aristaproto.message_field(6)
    """authz_result has the result of authorization check."""


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsKey(aristaproto.Message):
    """
    WorkspaceBuildDetailsKey uniquely identifies a build for a particular
     device in a workspace.
    """

    workspace_id: Optional[str] = aristaproto.message_field(
        1, wraps=aristaproto.TYPE_STRING
    )
    """workspace_id is the ID of the workspace."""

    build_id: Optional[str] = aristaproto.message_field(
        2, wraps=aristaproto.TYPE_STRING
    )
    """build_id is the ID of the build."""

    device_id: Optional[str] = aristaproto.message_field(
        3, wraps=aristaproto.TYPE_STRING
    )
    """device_id is the ID of the device."""


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetails(aristaproto.Message):
    """
    WorkspaceBuildDetails holds the details for a build of a device in a workspace.
    """

    key: "WorkspaceBuildDetailsKey" = aristaproto.message_field(1)
    """key identifies the build."""

    state: "BuildState" = aristaproto.enum_field(2)
    """state is the execution status of the build."""

    stage: "BuildStage" = aristaproto.enum_field(3)
    """stage is the stage of the build."""

    input_validation_results: "InputValidationResults" = aristaproto.message_field(4)
    """
    input_validation_results are the results of the input validation stage.
    """

    configlet_build_results: "ConfigletBuildResults" = aristaproto.message_field(5)
    """
    configlet_build_results are the results of the configlet build stage.
    """

    config_validation_result: "ConfigValidationResult" = aristaproto.message_field(6)
    """
    config_validation_result is the result of the config validation stage.
    """

    image_validation_result: "ImageValidationResult" = aristaproto.message_field(7)
    """image_validation_result is the result of the image validation stage."""

    config_validation_skip_cause: "ConfigValidationSkipCause" = aristaproto.enum_field(
        8
    )
    """
    config_validation_skip_cause is the reason, if any, that the config
     validation stage was skipped.
    """

    image_validation_skip_cause: "ImageValidationSkipCause" = aristaproto.enum_field(9)
    """
    image_validation_skip_cause is the reason, if any, that the image
     validation stage was skipped.
    """

    build_stage_state: "BuildStageState" = aristaproto.message_field(10)
    """build_stage_state is the state for each build stage."""

    authz_status: "DeviceAuthzStatus" = aristaproto.enum_field(11)
    """authz_status is the status of provision permission for the device."""


@dataclass(eq=False, repr=False)
class MetaResponse(aristaproto.Message):
    time: datetime = aristaproto.message_field(1)
    """
    Time holds the timestamp of the last item included in the metadata calculation.
    """

    type: "__subscriptions__.Operation" = aristaproto.enum_field(2)
    """
    Operation indicates how the value in this response should be considered.
     Under non-subscribe requests, this value should always be INITIAL. In a subscription,
     once all initial data is streamed and the client begins to receive modification updates,
     you should not see INITIAL again.
    """

    count: Optional[int] = aristaproto.message_field(3, wraps=aristaproto.TYPE_UINT32)
    """
    Count is the number of items present under the conditions of the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceRequest(aristaproto.Message):
    key: "WorkspaceKey" = aristaproto.message_field(1)
    """
    Key uniquely identifies a Workspace instance to retrieve.
     This value must be populated.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceResponse(aristaproto.Message):
    value: "Workspace" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
     Workspace instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceSomeRequest(aristaproto.Message):
    keys: List["WorkspaceKey"] = aristaproto.message_field(1)
    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceSomeResponse(aristaproto.Message):
    value: "Workspace" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    error: Optional[str] = aristaproto.message_field(2, wraps=aristaproto.TYPE_STRING)
    """
    Error is an optional field.
     It should be filled when there is an error in the GetSome process.
    """

    time: datetime = aristaproto.message_field(3)


@dataclass(eq=False, repr=False)
class WorkspaceStreamRequest(aristaproto.Message):
    partial_eq_filter: List["Workspace"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each Workspace at end.
         * Each Workspace response is fully-specified (all fields set).
       * start: Returns the state of each Workspace at start, followed by updates until now.
         * Each Workspace response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each Workspace at start, followed by updates
         until end.
         * Each Workspace response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceStreamResponse(aristaproto.Message):
    value: "Workspace" = aristaproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request.
     This structure will always have its key-field populated. Which other fields are
     populated, and why, depends on the value of Operation and what triggered this notification.
    """

    time: datetime = aristaproto.message_field(2)
    """Time holds the timestamp of this Workspace's last modification."""

    type: "__subscriptions__.Operation" = aristaproto.enum_field(3)
    """
    Operation indicates how the Workspace value in this response should be considered.
     Under non-subscribe requests, this value should always be INITIAL. In a subscription,
     once all initial data is streamed and the client begins to receive modification updates,
     you should not see INITIAL again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBatchedStreamRequest(aristaproto.Message):
    partial_eq_filter: List["Workspace"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each Workspace at end.
         * Each Workspace response is fully-specified (all fields set).
       * start: Returns the state of each Workspace at start, followed by updates until now.
         * Each Workspace response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each Workspace at start, followed by updates
         until end.
         * Each Workspace response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """

    max_messages: Optional[int] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_UINT32
    )
    """
    MaxMessages limits the maximum number of messages that can be contained in one batch.
     MaxMessages is required to be at least 1.
     The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
     INTERNAL_BATCH_LIMIT is set based on the maximum message size.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBatchedStreamResponse(aristaproto.Message):
    responses: List["WorkspaceStreamResponse"] = aristaproto.message_field(1)
    """
    Values are the values deemed relevant to the initiating request.
     The length of this structure is guaranteed to be between (inclusive) 1 and
     min(req.max_messages, INTERNAL_BATCH_LIMIT).
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildRequest(aristaproto.Message):
    key: "WorkspaceBuildKey" = aristaproto.message_field(1)
    """
    Key uniquely identifies a WorkspaceBuild instance to retrieve.
     This value must be populated.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildResponse(aristaproto.Message):
    value: "WorkspaceBuild" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
     WorkspaceBuild instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildSomeRequest(aristaproto.Message):
    keys: List["WorkspaceBuildKey"] = aristaproto.message_field(1)
    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildSomeResponse(aristaproto.Message):
    value: "WorkspaceBuild" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    error: Optional[str] = aristaproto.message_field(2, wraps=aristaproto.TYPE_STRING)
    """
    Error is an optional field.
     It should be filled when there is an error in the GetSome process.
    """

    time: datetime = aristaproto.message_field(3)


@dataclass(eq=False, repr=False)
class WorkspaceBuildStreamRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceBuild"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each WorkspaceBuild at end.
         * Each WorkspaceBuild response is fully-specified (all fields set).
       * start: Returns the state of each WorkspaceBuild at start, followed by updates until now.
         * Each WorkspaceBuild response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each WorkspaceBuild at start, followed by updates
         until end.
         * Each WorkspaceBuild response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildStreamResponse(aristaproto.Message):
    value: "WorkspaceBuild" = aristaproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request.
     This structure will always have its key-field populated. Which other fields are
     populated, and why, depends on the value of Operation and what triggered this notification.
    """

    time: datetime = aristaproto.message_field(2)
    """Time holds the timestamp of this WorkspaceBuild's last modification."""

    type: "__subscriptions__.Operation" = aristaproto.enum_field(3)
    """
    Operation indicates how the WorkspaceBuild value in this response should be considered.
     Under non-subscribe requests, this value should always be INITIAL. In a subscription,
     once all initial data is streamed and the client begins to receive modification updates,
     you should not see INITIAL again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildBatchedStreamRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceBuild"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each WorkspaceBuild at end.
         * Each WorkspaceBuild response is fully-specified (all fields set).
       * start: Returns the state of each WorkspaceBuild at start, followed by updates until now.
         * Each WorkspaceBuild response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each WorkspaceBuild at start, followed by updates
         until end.
         * Each WorkspaceBuild response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """

    max_messages: Optional[int] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_UINT32
    )
    """
    MaxMessages limits the maximum number of messages that can be contained in one batch.
     MaxMessages is required to be at least 1.
     The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
     INTERNAL_BATCH_LIMIT is set based on the maximum message size.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildBatchedStreamResponse(aristaproto.Message):
    responses: List["WorkspaceBuildStreamResponse"] = aristaproto.message_field(1)
    """
    Values are the values deemed relevant to the initiating request.
     The length of this structure is guaranteed to be between (inclusive) 1 and
     min(req.max_messages, INTERNAL_BATCH_LIMIT).
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsRequest(aristaproto.Message):
    key: "WorkspaceBuildDetailsKey" = aristaproto.message_field(1)
    """
    Key uniquely identifies a WorkspaceBuildDetails instance to retrieve.
     This value must be populated.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsResponse(aristaproto.Message):
    value: "WorkspaceBuildDetails" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
     WorkspaceBuildDetails instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsSomeRequest(aristaproto.Message):
    keys: List["WorkspaceBuildDetailsKey"] = aristaproto.message_field(1)
    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsSomeResponse(aristaproto.Message):
    value: "WorkspaceBuildDetails" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    error: Optional[str] = aristaproto.message_field(2, wraps=aristaproto.TYPE_STRING)
    """
    Error is an optional field.
     It should be filled when there is an error in the GetSome process.
    """

    time: datetime = aristaproto.message_field(3)


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsStreamRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceBuildDetails"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each WorkspaceBuildDetails at end.
         * Each WorkspaceBuildDetails response is fully-specified (all fields set).
       * start: Returns the state of each WorkspaceBuildDetails at start, followed by updates until now.
         * Each WorkspaceBuildDetails response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each WorkspaceBuildDetails at start, followed by updates
         until end.
         * Each WorkspaceBuildDetails response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsStreamResponse(aristaproto.Message):
    value: "WorkspaceBuildDetails" = aristaproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request.
     This structure will always have its key-field populated. Which other fields are
     populated, and why, depends on the value of Operation and what triggered this notification.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time holds the timestamp of this WorkspaceBuildDetails's last modification.
    """

    type: "__subscriptions__.Operation" = aristaproto.enum_field(3)
    """
    Operation indicates how the WorkspaceBuildDetails value in this response should be considered.
     Under non-subscribe requests, this value should always be INITIAL. In a subscription,
     once all initial data is streamed and the client begins to receive modification updates,
     you should not see INITIAL again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsBatchedStreamRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceBuildDetails"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each WorkspaceBuildDetails at end.
         * Each WorkspaceBuildDetails response is fully-specified (all fields set).
       * start: Returns the state of each WorkspaceBuildDetails at start, followed by updates until now.
         * Each WorkspaceBuildDetails response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each WorkspaceBuildDetails at start, followed by updates
         until end.
         * Each WorkspaceBuildDetails response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """

    max_messages: Optional[int] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_UINT32
    )
    """
    MaxMessages limits the maximum number of messages that can be contained in one batch.
     MaxMessages is required to be at least 1.
     The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
     INTERNAL_BATCH_LIMIT is set based on the maximum message size.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildDetailsBatchedStreamResponse(aristaproto.Message):
    responses: List["WorkspaceBuildDetailsStreamResponse"] = aristaproto.message_field(
        1
    )
    """
    Values are the values deemed relevant to the initiating request.
     The length of this structure is guaranteed to be between (inclusive) 1 and
     min(req.max_messages, INTERNAL_BATCH_LIMIT).
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigRequest(aristaproto.Message):
    key: "WorkspaceKey" = aristaproto.message_field(1)
    """
    Key uniquely identifies a WorkspaceConfig instance to retrieve.
     This value must be populated.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigResponse(aristaproto.Message):
    value: "WorkspaceConfig" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
     WorkspaceConfig instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSomeRequest(aristaproto.Message):
    keys: List["WorkspaceKey"] = aristaproto.message_field(1)
    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data.
     If no time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSomeResponse(aristaproto.Message):
    value: "WorkspaceConfig" = aristaproto.message_field(1)
    """
    Value is the value requested.
     This structure will be fully-populated as it exists in the datastore. If
     optional fields were not given at creation, these fields will be empty or
     set to default values.
    """

    error: Optional[str] = aristaproto.message_field(2, wraps=aristaproto.TYPE_STRING)
    """
    Error is an optional field.
     It should be filled when there is an error in the GetSome process.
    """

    time: datetime = aristaproto.message_field(3)


@dataclass(eq=False, repr=False)
class WorkspaceConfigStreamRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceConfig"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each WorkspaceConfig at end.
         * Each WorkspaceConfig response is fully-specified (all fields set).
       * start: Returns the state of each WorkspaceConfig at start, followed by updates until now.
         * Each WorkspaceConfig response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each WorkspaceConfig at start, followed by updates
         until end.
         * Each WorkspaceConfig response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigStreamResponse(aristaproto.Message):
    value: "WorkspaceConfig" = aristaproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request.
     This structure will always have its key-field populated. Which other fields are
     populated, and why, depends on the value of Operation and what triggered this notification.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time holds the timestamp of this WorkspaceConfig's last modification.
    """

    type: "__subscriptions__.Operation" = aristaproto.enum_field(3)
    """
    Operation indicates how the WorkspaceConfig value in this response should be considered.
     Under non-subscribe requests, this value should always be INITIAL. In a subscription,
     once all initial data is streamed and the client begins to receive modification updates,
     you should not see INITIAL again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigBatchedStreamRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceConfig"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
     This requires all provided fields to be equal to the response.

     While transparent to users, this field also allows services to optimize internal
     subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = aristaproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
     If this field is populated, at least one of the two time fields are required.

     For GetAll, the fields start and end can be used as follows:

       * end: Returns the state of each WorkspaceConfig at end.
         * Each WorkspaceConfig response is fully-specified (all fields set).
       * start: Returns the state of each WorkspaceConfig at start, followed by updates until now.
         * Each WorkspaceConfig response at start is fully-specified, but updates may be partial.
       * start and end: Returns the state of each WorkspaceConfig at start, followed by updates
         until end.
         * Each WorkspaceConfig response at start is fully-specified, but updates until end may
           be partial.

     This field is not allowed in the Subscribe RPC.
    """

    max_messages: Optional[int] = aristaproto.message_field(
        4, wraps=aristaproto.TYPE_UINT32
    )
    """
    MaxMessages limits the maximum number of messages that can be contained in one batch.
     MaxMessages is required to be at least 1.
     The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
     INTERNAL_BATCH_LIMIT is set based on the maximum message size.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigBatchedStreamResponse(aristaproto.Message):
    responses: List["WorkspaceConfigStreamResponse"] = aristaproto.message_field(1)
    """
    Values are the values deemed relevant to the initiating request.
     The length of this structure is guaranteed to be between (inclusive) 1 and
     min(req.max_messages, INTERNAL_BATCH_LIMIT).
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSetRequest(aristaproto.Message):
    value: "WorkspaceConfig" = aristaproto.message_field(1)
    """
    WorkspaceConfig carries the value to set into the datastore.
     See the documentation on the WorkspaceConfig struct for which fields are required.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSetResponse(aristaproto.Message):
    value: "WorkspaceConfig" = aristaproto.message_field(1)
    """
    Value carries all the values given in the WorkspaceConfigSetRequest as well
     as any server-generated values.
    """

    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the (UTC) timestamp at which the system recognizes the
     creation. The only guarantees made about this timestamp are:

        - it is after the time the request was received
        - a time-ranged query with StartTime==CreatedAt will include this instance.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSetSomeRequest(aristaproto.Message):
    values: List["WorkspaceConfig"] = aristaproto.message_field(1)
    """
    value contains a list of WorkspaceConfig values to write.
     It is possible to provide more values than can fit within either:
         - the maxiumum send size of the client
         - the maximum receive size of the server
     If this error occurs you must reduce the number of values sent.
     See gRPC "maximum message size" documentation for more information.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSetSomeResponse(aristaproto.Message):
    key: "WorkspaceKey" = aristaproto.message_field(1)
    error: str = aristaproto.string_field(2)


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteRequest(aristaproto.Message):
    key: "WorkspaceKey" = aristaproto.message_field(1)
    """
    Key indicates which WorkspaceConfig instance to remove.
     This field must always be set.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteResponse(aristaproto.Message):
    key: "WorkspaceKey" = aristaproto.message_field(1)
    """Key echoes back the key of the deleted WorkspaceConfig instance."""

    time: datetime = aristaproto.message_field(2)
    """
    Time indicates the (UTC) timestamp at which the system recognizes the
     deletion. The only guarantees made about this timestamp are:

        - it is after the time the request was received
        - a time-ranged query with StartTime==DeletedAt will not include this instance.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteSomeRequest(aristaproto.Message):
    keys: List["WorkspaceKey"] = aristaproto.message_field(1)
    """key contains a list of WorkspaceConfig keys to delete"""


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteSomeResponse(aristaproto.Message):
    """
    WorkspaceConfigDeleteSomeResponse is only sent when there is an error.
    """

    key: "WorkspaceKey" = aristaproto.message_field(1)
    error: str = aristaproto.string_field(2)


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteAllRequest(aristaproto.Message):
    partial_eq_filter: List["WorkspaceConfig"] = aristaproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a DeleteAll.
     This requires all provided fields to be equal to the response.
     A filtered DeleteAll will use GetAll with filter to find things to delete.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteAllResponse(aristaproto.Message):
    type: "___fmp__.DeleteError" = aristaproto.enum_field(1)
    """
    This describes the class of delete error.
     A DeleteAllResponse is only sent when there is an error.
    """

    error: Optional[str] = aristaproto.message_field(2, wraps=aristaproto.TYPE_STRING)
    """This indicates the error message from the delete failure."""

    key: "WorkspaceKey" = aristaproto.message_field(3)
    """
    This is the key of the WorkspaceConfig instance that failed to be deleted.
    """

    time: datetime = aristaproto.message_field(4)
    """Time indicates the (UTC) timestamp when the key was being deleted."""


class WorkspaceServiceStub(aristaproto.ServiceStub):
    async def get_one(
        self,
        workspace_request: "WorkspaceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceService/GetOne",
            workspace_request,
            WorkspaceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_some(
        self,
        workspace_some_request: "WorkspaceSomeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceSomeResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/GetSome",
            workspace_some_request,
            WorkspaceSomeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all(
        self,
        workspace_stream_request: "WorkspaceStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/GetAll",
            workspace_stream_request,
            WorkspaceStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_stream_request: "WorkspaceStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/Subscribe",
            workspace_stream_request,
            WorkspaceStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_meta(
        self,
        workspace_stream_request: "WorkspaceStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetaResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceService/GetMeta",
            workspace_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def subscribe_meta(
        self,
        workspace_stream_request: "WorkspaceStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["MetaResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/SubscribeMeta",
            workspace_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all_batched(
        self,
        workspace_batched_stream_request: "WorkspaceBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/GetAllBatched",
            workspace_batched_stream_request,
            WorkspaceBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe_batched(
        self,
        workspace_batched_stream_request: "WorkspaceBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/SubscribeBatched",
            workspace_batched_stream_request,
            WorkspaceBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class WorkspaceBuildServiceStub(aristaproto.ServiceStub):
    async def get_one(
        self,
        workspace_build_request: "WorkspaceBuildRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceBuildResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceBuildService/GetOne",
            workspace_build_request,
            WorkspaceBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_some(
        self,
        workspace_build_some_request: "WorkspaceBuildSomeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildSomeResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/GetSome",
            workspace_build_some_request,
            WorkspaceBuildSomeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all(
        self,
        workspace_build_stream_request: "WorkspaceBuildStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/GetAll",
            workspace_build_stream_request,
            WorkspaceBuildStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_build_stream_request: "WorkspaceBuildStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/Subscribe",
            workspace_build_stream_request,
            WorkspaceBuildStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_meta(
        self,
        workspace_build_stream_request: "WorkspaceBuildStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetaResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceBuildService/GetMeta",
            workspace_build_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def subscribe_meta(
        self,
        workspace_build_stream_request: "WorkspaceBuildStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["MetaResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/SubscribeMeta",
            workspace_build_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all_batched(
        self,
        workspace_build_batched_stream_request: "WorkspaceBuildBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/GetAllBatched",
            workspace_build_batched_stream_request,
            WorkspaceBuildBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe_batched(
        self,
        workspace_build_batched_stream_request: "WorkspaceBuildBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/SubscribeBatched",
            workspace_build_batched_stream_request,
            WorkspaceBuildBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class WorkspaceBuildDetailsServiceStub(aristaproto.ServiceStub):
    async def get_one(
        self,
        workspace_build_details_request: "WorkspaceBuildDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceBuildDetailsResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetOne",
            workspace_build_details_request,
            WorkspaceBuildDetailsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_some(
        self,
        workspace_build_details_some_request: "WorkspaceBuildDetailsSomeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildDetailsSomeResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetSome",
            workspace_build_details_some_request,
            WorkspaceBuildDetailsSomeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildDetailsStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetAll",
            workspace_build_details_stream_request,
            WorkspaceBuildDetailsStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildDetailsStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/Subscribe",
            workspace_build_details_stream_request,
            WorkspaceBuildDetailsStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_meta(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetaResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetMeta",
            workspace_build_details_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def subscribe_meta(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["MetaResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/SubscribeMeta",
            workspace_build_details_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all_batched(
        self,
        workspace_build_details_batched_stream_request: "WorkspaceBuildDetailsBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildDetailsBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetAllBatched",
            workspace_build_details_batched_stream_request,
            WorkspaceBuildDetailsBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe_batched(
        self,
        workspace_build_details_batched_stream_request: "WorkspaceBuildDetailsBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildDetailsBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildDetailsService/SubscribeBatched",
            workspace_build_details_batched_stream_request,
            WorkspaceBuildDetailsBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class WorkspaceConfigServiceStub(aristaproto.ServiceStub):
    async def get_one(
        self,
        workspace_config_request: "WorkspaceConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceConfigResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/GetOne",
            workspace_config_request,
            WorkspaceConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_some(
        self,
        workspace_config_some_request: "WorkspaceConfigSomeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigSomeResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/GetSome",
            workspace_config_some_request,
            WorkspaceConfigSomeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all(
        self,
        workspace_config_stream_request: "WorkspaceConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/GetAll",
            workspace_config_stream_request,
            WorkspaceConfigStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_config_stream_request: "WorkspaceConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/Subscribe",
            workspace_config_stream_request,
            WorkspaceConfigStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_meta(
        self,
        workspace_config_stream_request: "WorkspaceConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetaResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/GetMeta",
            workspace_config_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def subscribe_meta(
        self,
        workspace_config_stream_request: "WorkspaceConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["MetaResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/SubscribeMeta",
            workspace_config_stream_request,
            MetaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set(
        self,
        workspace_config_set_request: "WorkspaceConfigSetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceConfigSetResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/Set",
            workspace_config_set_request,
            WorkspaceConfigSetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_some(
        self,
        workspace_config_set_some_request: "WorkspaceConfigSetSomeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigSetSomeResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/SetSome",
            workspace_config_set_some_request,
            WorkspaceConfigSetSomeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delete(
        self,
        workspace_config_delete_request: "WorkspaceConfigDeleteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceConfigDeleteResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/Delete",
            workspace_config_delete_request,
            WorkspaceConfigDeleteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_some(
        self,
        workspace_config_delete_some_request: "WorkspaceConfigDeleteSomeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigDeleteSomeResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/DeleteSome",
            workspace_config_delete_some_request,
            WorkspaceConfigDeleteSomeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delete_all(
        self,
        workspace_config_delete_all_request: "WorkspaceConfigDeleteAllRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigDeleteAllResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/DeleteAll",
            workspace_config_delete_all_request,
            WorkspaceConfigDeleteAllResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_all_batched(
        self,
        workspace_config_batched_stream_request: "WorkspaceConfigBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/GetAllBatched",
            workspace_config_batched_stream_request,
            WorkspaceConfigBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe_batched(
        self,
        workspace_config_batched_stream_request: "WorkspaceConfigBatchedStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigBatchedStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/SubscribeBatched",
            workspace_config_batched_stream_request,
            WorkspaceConfigBatchedStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class WorkspaceServiceBase(ServiceBase):

    async def get_one(
        self, workspace_request: "WorkspaceRequest"
    ) -> "WorkspaceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_some(
        self, workspace_some_request: "WorkspaceSomeRequest"
    ) -> AsyncIterator["WorkspaceSomeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, workspace_stream_request: "WorkspaceStreamRequest"
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe(
        self, workspace_stream_request: "WorkspaceStreamRequest"
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_meta(
        self, workspace_stream_request: "WorkspaceStreamRequest"
    ) -> "MetaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_meta(
        self, workspace_stream_request: "WorkspaceStreamRequest"
    ) -> AsyncIterator["MetaResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_batched(
        self, workspace_batched_stream_request: "WorkspaceBatchedStreamRequest"
    ) -> AsyncIterator["WorkspaceBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_batched(
        self, workspace_batched_stream_request: "WorkspaceBatchedStreamRequest"
    ) -> AsyncIterator["WorkspaceBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_one(
        self, stream: "grpclib.server.Stream[WorkspaceRequest, WorkspaceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_some(
        self,
        stream: "grpclib.server.Stream[WorkspaceSomeRequest, WorkspaceSomeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_some,
            stream,
            request,
        )

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceStreamRequest, WorkspaceStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceStreamRequest, WorkspaceStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    async def __rpc_get_meta(
        self, stream: "grpclib.server.Stream[WorkspaceStreamRequest, MetaResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_meta(request)
        await stream.send_message(response)

    async def __rpc_subscribe_meta(
        self, stream: "grpclib.server.Stream[WorkspaceStreamRequest, MetaResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_meta,
            stream,
            request,
        )

    async def __rpc_get_all_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceBatchedStreamRequest, WorkspaceBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all_batched,
            stream,
            request,
        )

    async def __rpc_subscribe_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceBatchedStreamRequest, WorkspaceBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_batched,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceRequest,
                WorkspaceResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/GetSome": grpclib.const.Handler(
                self.__rpc_get_some,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceSomeRequest,
                WorkspaceSomeResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceStreamRequest,
                WorkspaceStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceStreamRequest,
                WorkspaceStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/GetMeta": grpclib.const.Handler(
                self.__rpc_get_meta,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/SubscribeMeta": grpclib.const.Handler(
                self.__rpc_subscribe_meta,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/GetAllBatched": grpclib.const.Handler(
                self.__rpc_get_all_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBatchedStreamRequest,
                WorkspaceBatchedStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/SubscribeBatched": grpclib.const.Handler(
                self.__rpc_subscribe_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBatchedStreamRequest,
                WorkspaceBatchedStreamResponse,
            ),
        }


class WorkspaceBuildServiceBase(ServiceBase):

    async def get_one(
        self, workspace_build_request: "WorkspaceBuildRequest"
    ) -> "WorkspaceBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_some(
        self, workspace_build_some_request: "WorkspaceBuildSomeRequest"
    ) -> AsyncIterator["WorkspaceBuildSomeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, workspace_build_stream_request: "WorkspaceBuildStreamRequest"
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe(
        self, workspace_build_stream_request: "WorkspaceBuildStreamRequest"
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_meta(
        self, workspace_build_stream_request: "WorkspaceBuildStreamRequest"
    ) -> "MetaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_meta(
        self, workspace_build_stream_request: "WorkspaceBuildStreamRequest"
    ) -> AsyncIterator["MetaResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_batched(
        self,
        workspace_build_batched_stream_request: "WorkspaceBuildBatchedStreamRequest",
    ) -> AsyncIterator["WorkspaceBuildBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_batched(
        self,
        workspace_build_batched_stream_request: "WorkspaceBuildBatchedStreamRequest",
    ) -> AsyncIterator["WorkspaceBuildBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_one(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildRequest, WorkspaceBuildResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_some(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildSomeRequest, WorkspaceBuildSomeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_some,
            stream,
            request,
        )

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildStreamRequest, WorkspaceBuildStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildStreamRequest, WorkspaceBuildStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    async def __rpc_get_meta(
        self, stream: "grpclib.server.Stream[WorkspaceBuildStreamRequest, MetaResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_meta(request)
        await stream.send_message(response)

    async def __rpc_subscribe_meta(
        self, stream: "grpclib.server.Stream[WorkspaceBuildStreamRequest, MetaResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_meta,
            stream,
            request,
        )

    async def __rpc_get_all_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildBatchedStreamRequest, WorkspaceBuildBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all_batched,
            stream,
            request,
        )

    async def __rpc_subscribe_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildBatchedStreamRequest, WorkspaceBuildBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_batched,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceBuildService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceBuildRequest,
                WorkspaceBuildResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/GetSome": grpclib.const.Handler(
                self.__rpc_get_some,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildSomeRequest,
                WorkspaceBuildSomeResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildStreamRequest,
                WorkspaceBuildStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildStreamRequest,
                WorkspaceBuildStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/GetMeta": grpclib.const.Handler(
                self.__rpc_get_meta,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceBuildStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/SubscribeMeta": grpclib.const.Handler(
                self.__rpc_subscribe_meta,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/GetAllBatched": grpclib.const.Handler(
                self.__rpc_get_all_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildBatchedStreamRequest,
                WorkspaceBuildBatchedStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/SubscribeBatched": grpclib.const.Handler(
                self.__rpc_subscribe_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildBatchedStreamRequest,
                WorkspaceBuildBatchedStreamResponse,
            ),
        }


class WorkspaceBuildDetailsServiceBase(ServiceBase):

    async def get_one(
        self, workspace_build_details_request: "WorkspaceBuildDetailsRequest"
    ) -> "WorkspaceBuildDetailsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_some(
        self, workspace_build_details_some_request: "WorkspaceBuildDetailsSomeRequest"
    ) -> AsyncIterator["WorkspaceBuildDetailsSomeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
    ) -> AsyncIterator["WorkspaceBuildDetailsStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
    ) -> AsyncIterator["WorkspaceBuildDetailsStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_meta(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
    ) -> "MetaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_meta(
        self,
        workspace_build_details_stream_request: "WorkspaceBuildDetailsStreamRequest",
    ) -> AsyncIterator["MetaResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_batched(
        self,
        workspace_build_details_batched_stream_request: "WorkspaceBuildDetailsBatchedStreamRequest",
    ) -> AsyncIterator["WorkspaceBuildDetailsBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_batched(
        self,
        workspace_build_details_batched_stream_request: "WorkspaceBuildDetailsBatchedStreamRequest",
    ) -> AsyncIterator["WorkspaceBuildDetailsBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_one(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsRequest, WorkspaceBuildDetailsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_some(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsSomeRequest, WorkspaceBuildDetailsSomeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_some,
            stream,
            request,
        )

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsStreamRequest, WorkspaceBuildDetailsStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsStreamRequest, WorkspaceBuildDetailsStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    async def __rpc_get_meta(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsStreamRequest, MetaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_meta(request)
        await stream.send_message(response)

    async def __rpc_subscribe_meta(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsStreamRequest, MetaResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_meta,
            stream,
            request,
        )

    async def __rpc_get_all_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsBatchedStreamRequest, WorkspaceBuildDetailsBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all_batched,
            stream,
            request,
        )

    async def __rpc_subscribe_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildDetailsBatchedStreamRequest, WorkspaceBuildDetailsBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_batched,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceBuildDetailsRequest,
                WorkspaceBuildDetailsResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetSome": grpclib.const.Handler(
                self.__rpc_get_some,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildDetailsSomeRequest,
                WorkspaceBuildDetailsSomeResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildDetailsStreamRequest,
                WorkspaceBuildDetailsStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildDetailsStreamRequest,
                WorkspaceBuildDetailsStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetMeta": grpclib.const.Handler(
                self.__rpc_get_meta,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceBuildDetailsStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/SubscribeMeta": grpclib.const.Handler(
                self.__rpc_subscribe_meta,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildDetailsStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/GetAllBatched": grpclib.const.Handler(
                self.__rpc_get_all_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildDetailsBatchedStreamRequest,
                WorkspaceBuildDetailsBatchedStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildDetailsService/SubscribeBatched": grpclib.const.Handler(
                self.__rpc_subscribe_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildDetailsBatchedStreamRequest,
                WorkspaceBuildDetailsBatchedStreamResponse,
            ),
        }


class WorkspaceConfigServiceBase(ServiceBase):

    async def get_one(
        self, workspace_config_request: "WorkspaceConfigRequest"
    ) -> "WorkspaceConfigResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_some(
        self, workspace_config_some_request: "WorkspaceConfigSomeRequest"
    ) -> AsyncIterator["WorkspaceConfigSomeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, workspace_config_stream_request: "WorkspaceConfigStreamRequest"
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe(
        self, workspace_config_stream_request: "WorkspaceConfigStreamRequest"
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_meta(
        self, workspace_config_stream_request: "WorkspaceConfigStreamRequest"
    ) -> "MetaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_meta(
        self, workspace_config_stream_request: "WorkspaceConfigStreamRequest"
    ) -> AsyncIterator["MetaResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set(
        self, workspace_config_set_request: "WorkspaceConfigSetRequest"
    ) -> "WorkspaceConfigSetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_some(
        self, workspace_config_set_some_request: "WorkspaceConfigSetSomeRequest"
    ) -> AsyncIterator["WorkspaceConfigSetSomeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(
        self, workspace_config_delete_request: "WorkspaceConfigDeleteRequest"
    ) -> "WorkspaceConfigDeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_some(
        self, workspace_config_delete_some_request: "WorkspaceConfigDeleteSomeRequest"
    ) -> AsyncIterator["WorkspaceConfigDeleteSomeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_all(
        self, workspace_config_delete_all_request: "WorkspaceConfigDeleteAllRequest"
    ) -> AsyncIterator["WorkspaceConfigDeleteAllResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_batched(
        self,
        workspace_config_batched_stream_request: "WorkspaceConfigBatchedStreamRequest",
    ) -> AsyncIterator["WorkspaceConfigBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe_batched(
        self,
        workspace_config_batched_stream_request: "WorkspaceConfigBatchedStreamRequest",
    ) -> AsyncIterator["WorkspaceConfigBatchedStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_one(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigRequest, WorkspaceConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_some(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigSomeRequest, WorkspaceConfigSomeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_some,
            stream,
            request,
        )

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigStreamRequest, WorkspaceConfigStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigStreamRequest, WorkspaceConfigStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    async def __rpc_get_meta(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigStreamRequest, MetaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_meta(request)
        await stream.send_message(response)

    async def __rpc_subscribe_meta(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigStreamRequest, MetaResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_meta,
            stream,
            request,
        )

    async def __rpc_set(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigSetRequest, WorkspaceConfigSetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set(request)
        await stream.send_message(response)

    async def __rpc_set_some(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigSetSomeRequest, WorkspaceConfigSetSomeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.set_some,
            stream,
            request,
        )

    async def __rpc_delete(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigDeleteRequest, WorkspaceConfigDeleteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    async def __rpc_delete_some(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigDeleteSomeRequest, WorkspaceConfigDeleteSomeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.delete_some,
            stream,
            request,
        )

    async def __rpc_delete_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigDeleteAllRequest, WorkspaceConfigDeleteAllResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.delete_all,
            stream,
            request,
        )

    async def __rpc_get_all_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigBatchedStreamRequest, WorkspaceConfigBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all_batched,
            stream,
            request,
        )

    async def __rpc_subscribe_batched(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigBatchedStreamRequest, WorkspaceConfigBatchedStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe_batched,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceConfigService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigRequest,
                WorkspaceConfigResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/GetSome": grpclib.const.Handler(
                self.__rpc_get_some,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigSomeRequest,
                WorkspaceConfigSomeResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigStreamRequest,
                WorkspaceConfigStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigStreamRequest,
                WorkspaceConfigStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/GetMeta": grpclib.const.Handler(
                self.__rpc_get_meta,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/SubscribeMeta": grpclib.const.Handler(
                self.__rpc_subscribe_meta,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigStreamRequest,
                MetaResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/Set": grpclib.const.Handler(
                self.__rpc_set,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigSetRequest,
                WorkspaceConfigSetResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/SetSome": grpclib.const.Handler(
                self.__rpc_set_some,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigSetSomeRequest,
                WorkspaceConfigSetSomeResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigDeleteRequest,
                WorkspaceConfigDeleteResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/DeleteSome": grpclib.const.Handler(
                self.__rpc_delete_some,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigDeleteSomeRequest,
                WorkspaceConfigDeleteSomeResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/DeleteAll": grpclib.const.Handler(
                self.__rpc_delete_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigDeleteAllRequest,
                WorkspaceConfigDeleteAllResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/GetAllBatched": grpclib.const.Handler(
                self.__rpc_get_all_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigBatchedStreamRequest,
                WorkspaceConfigBatchedStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/SubscribeBatched": grpclib.const.Handler(
                self.__rpc_subscribe_batched,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigBatchedStreamRequest,
                WorkspaceConfigBatchedStreamResponse,
            ),
        }
